import React, { Component } from 'react';
import {
  View, Text, TextInput, StyleSheet, ScrollView, TouchableOpacity,
  SafeAreaView, StatusBar, ActivityIndicator, Animated
} from 'react-native';

const API_URL = 'http://localhost:3000/api';

class App extends Component {
  constructor() {
    super();
    this.state = {
      currentScreen: '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì',
      distance: '',
      time: '',
      fare: null,
      baseFare: null,
      distanceFare: null,
      waitingFare: null,
      history: [], // ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
      loading: false,
      fadeAnim: new Animated.Value(0),
      scaleAnim: new Animated.Value(0.9)
    };
  }

  componentDidMount() {
    this.fetchHistory();
    Animated.parallel([
      Animated.timing(this.state.fadeAnim, {
        toValue: 1,
        duration: 1000,
        useNativeDriver: true
      }),
      Animated.spring(this.state.scaleAnim, {
        toValue: 1,
        friction: 8,
        useNativeDriver: true
      })
    ]).start();
  }

  fetchHistory = async () => {
    try {
      this.setState({ loading: true });
      const response = await fetch(`${API_URL}/history`);
      const result = await response.json();
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô result.data
      this.setState({ history: result.data || [] });
    } catch (error) {
      alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ');
      this.setState({ history: [] }); // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏ß‡πà‡∏≤‡∏á
    } finally {
      this.setState({ loading: false });
    }
  };

  renderNavigation() {
    const screens = ['‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì', '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥', '‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö', '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠'];
    return (
      <ScrollView 
        horizontal 
        showsHorizontalScrollIndicator={false}
        style={styles.navigationScroll}
      >
        <View style={styles.navigationContainer}>
          {screens.map((screen) => (
            <TouchableOpacity
              key={screen}
              style={[
                styles.navButton,
                this.state.currentScreen === screen && styles.navButtonActive
              ]}
              onPress={() => this.setState({ currentScreen: screen })}
            >
              <Text style={[
                styles.navButtonText,
                this.state.currentScreen === screen && styles.navButtonTextActive
              ]}>
                {screen}
              </Text>
            </TouchableOpacity>
          ))}
        </View>
      </ScrollView>
    );
  }

  renderAbout() {
    return (
      <View style={styles.screenContainer}>
        <View style={styles.aboutContainer}>
          <View style={styles.aboutHeader}>
            <View style={styles.logoCircle}>
              <Text style={styles.logoText}>M</Text>
            </View>
            <Text style={styles.aboutTitle}>‡πÅ‡∏≠‡∏û‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÅ‡∏ó‡πá‡∏Å‡∏ã‡∏µ‡πà</Text>
            <Text style={styles.appVersion}>‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 1.0.0</Text>
          </View>
          
          <View style={styles.aboutContent}>
            <Text style={styles.aboutDescription}>
              ‡πÅ‡∏≠‡∏û‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡πÅ‡∏ó‡πá‡∏Å‡∏ã‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏¥‡∏°‡∏ì‡∏ë‡∏• 
              ‡πÇ‡∏î‡∏¢‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏ó‡∏≤‡∏á‡∏ö‡∏Å
            </Text>
            
            <View style={styles.featureList}>
              <Text style={styles.featureTitle}>‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å:</Text>
              <View style={styles.featureItem}>
                <View style={styles.featureDot} />
                <Text style={styles.featureText}>‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤</Text>
              </View>
              <View style={styles.featureItem}>
                <View style={styles.featureDot} />
                <Text style={styles.featureText}>‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£</Text>
              </View>
              <View style={styles.featureItem}>
                <View style={styles.featureDot} />
                <Text style={styles.featureText}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì</Text>
              </View>
            </View>
          </View>
        </View>
      </View>
    );
  }

  renderContact() {
    return (
      <View style={styles.screenContainer}>
        <View style={styles.contactContainer}>
          <Text style={styles.contactTitle}>‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤</Text>
          
          <TouchableOpacity 
            style={styles.contactCard}
            onPress={() => Linking.openURL('mailto:support@taximeter.com')}
          >
            <View style={[styles.contactIcon, { backgroundColor: '#4CAF50' }]}>
              <Text style={styles.contactIconText}>‚úâÔ∏è</Text>
            </View>
            <View style={styles.contactInfo}>
              <Text style={styles.contactLabel}>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</Text>
              <Text style={styles.contactValue}>support@taximeter.com</Text>
            </View>
          </TouchableOpacity>

          <TouchableOpacity 
            style={styles.contactCard}
            onPress={() => Linking.openURL('tel:+66123456789')}
          >
            <View style={[styles.contactIcon, { backgroundColor: '#2196F3' }]}>
              <Text style={styles.contactIconText}>üìû</Text>
            </View>
            <View style={styles.contactInfo}>
              <Text style={styles.contactLabel}>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</Text>
              <Text style={styles.contactValue}>012-345-6789</Text>
            </View>
          </TouchableOpacity>

          <TouchableOpacity 
            style={styles.contactCard}
            onPress={() => Linking.openURL('https://line.me/ti/p/@taximeter')}
          >
            <View style={[styles.contactIcon, { backgroundColor: '#00B900' }]}>
              <Text style={styles.contactIconText}>üí¨</Text>
            </View>
            <View style={styles.contactInfo}>
              <Text style={styles.contactLabel}>Line Official</Text>
              <Text style={styles.contactValue}>@taximeter</Text>
            </View>
          </TouchableOpacity>

          <View style={styles.officeContainer}>
            <Text style={styles.officeTitle}>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</Text>
            <Text style={styles.officeAddress}>
              123 ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏ä‡∏±‡πâ‡∏ô 1{'\n'}
              ‡∏ñ‡∏ô‡∏ô‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏° 9 ‡πÅ‡∏Ç‡∏ß‡∏á‡∏´‡πâ‡∏ß‡∏¢‡∏Ç‡∏ß‡∏≤‡∏á{'\n'}
              ‡πÄ‡∏Ç‡∏ï‡∏´‡πâ‡∏ß‡∏¢‡∏Ç‡∏ß‡∏≤‡∏á ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10310
            </Text>
            <Text style={styles.officeHours}>
              ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£: ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå - ‡∏®‡∏∏‡∏Å‡∏£‡πå (9:00 - 18:00 ‡∏ô.)
            </Text>
          </View>
        </View>
      </View>
    );
  }

  renderCalculator() {
    const { distance, time, fare, loading } = this.state;
    return (
      <View style={styles.screenContainer}>
        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß */}
        <View style={styles.fareGuideCard}>
          <Text style={styles.fareGuideTitle}>‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£</Text>
          
          <View style={styles.fareSection}>
            <Text style={styles.fareSectionTitle}>‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</Text>
            <View style={styles.fareRow}>
              <Text style={styles.fareText}>0 - 1 ‡∏Å‡∏°.</Text>
              <Text style={styles.fareValue}>35 ‡∏ö‡∏≤‡∏ó</Text>
            </View>
          </View>
  
          <View style={styles.fareSection}>
            <Text style={styles.fareSectionTitle}>‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á</Text>
            <View style={styles.fareRow}>
              <Text style={styles.fareText}>1 - 10 ‡∏Å‡∏°.</Text>
              <Text style={styles.fareValue}>+5.50 ‡∏ö‡∏≤‡∏ó/‡∏Å‡∏°.</Text>
            </View>
            <View style={styles.fareRow}>
              <Text style={styles.fareText}>11 - 20 ‡∏Å‡∏°.</Text>
              <Text style={styles.fareValue}>+6.50 ‡∏ö‡∏≤‡∏ó/‡∏Å‡∏°.</Text>
            </View>
            <View style={styles.fareRow}>
              <Text style={styles.fareText}>21 - 40 ‡∏Å‡∏°.</Text>
              <Text style={styles.fareValue}>+7.50 ‡∏ö‡∏≤‡∏ó/‡∏Å‡∏°.</Text>
            </View>
            <View style={styles.fareRow}>
              <Text style={styles.fareText}>41 - 60 ‡∏Å‡∏°.</Text>
              <Text style={styles.fareValue}>+8.00 ‡∏ö‡∏≤‡∏ó/‡∏Å‡∏°.</Text>
            </View>
            <View style={styles.fareRow}>
              <Text style={styles.fareText}>61 - 80 ‡∏Å‡∏°.</Text>
              <Text style={styles.fareValue}>+9.00 ‡∏ö‡∏≤‡∏ó/‡∏Å‡∏°.</Text>
            </View>
            <View style={styles.fareRow}>
              <Text style={styles.fareText}> 80 ‡∏Å‡∏°.</Text>
              <Text style={styles.fareValue}>+10.50 ‡∏ö‡∏≤‡∏ó/‡∏Å‡∏°.</Text>
            </View>
          </View>
  
          <View style={styles.fareSection}>
            <Text style={styles.fareSectionTitle}>‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î</Text>
            <View style={styles.fareRow}>
              <Text style={styles.fareText}>‡∏ó‡∏∏‡∏Å‡∏ô‡∏≤‡∏ó‡∏µ</Text>
              <Text style={styles.fareValue}>2 ‡∏ö‡∏≤‡∏ó/‡∏ô‡∏≤‡∏ó‡∏µ</Text>
            </View>
          </View>
        </View>
  
        {/* ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì */}
        <View style={styles.calculatorCard}>
          <Text style={styles.calculatorTitle}>‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£</Text>
          
          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á (‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£)</Text>
            <TextInput
              style={styles.input}
              placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á"
              keyboardType="numeric"
              value={distance}
              onChangeText={(text) => this.setState({ distance: text })}
            />
          </View>
  
          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î (‡∏ô‡∏≤‡∏ó‡∏µ)</Text>
            <TextInput
              style={styles.input}
              placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î"
              keyboardType="numeric"
              value={time}
              onChangeText={(text) => this.setState({ time: text })}
            />
          </View>
  
          <TouchableOpacity
            style={styles.calculateButton}
            onPress={this.calculateFare}
            disabled={loading}
          >
            {loading ? (
              <ActivityIndicator color="#FFF" />
            ) : (
              <Text style={styles.buttonText}>‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£</Text>
            )}
          </TouchableOpacity>
        </View>
  
        {fare && (
  <View style={styles.resultCard}>
    <Text style={styles.resultTitle}>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£</Text>
    {this.state.fareBreakdown.map((item, index) => (
      <View key={index} style={styles.resultRow}>
        <Text style={styles.resultLabel}>
          {item.range} 
          {item.distance && ` (${item.distance.toFixed(1)} ‡∏Å‡∏°. √ó ${item.rate} ‡∏ö‡∏≤‡∏ó)`}:
        </Text>
        <Text style={styles.resultValue}>{item.fare.toFixed(2)} ‡∏ö‡∏≤‡∏ó</Text>
      </View>
    ))}
    <View style={styles.resultRow}>
      <Text style={styles.resultLabel}>‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î ({time} ‡∏ô‡∏≤‡∏ó‡∏µ √ó 2 ‡∏ö‡∏≤‡∏ó):</Text>
      <Text style={styles.resultValue}>{this.state.waitingFare.toFixed(2)} ‡∏ö‡∏≤‡∏ó</Text>
    </View>
    <View style={[styles.resultRow, styles.resultTotal]}>
      <Text style={styles.totalLabel}>‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô:</Text>
      <Text style={styles.totalValue}>{fare} ‡∏ö‡∏≤‡∏ó</Text>
    </View>
  </View>
)}
      </View>
    );
  }

  renderFareGuide() {
    return (
      <View style={styles.screenContainer}>
        <View style={styles.fareGuide}>
          <Text style={styles.fareGuideTitle}>‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£</Text>
          <View style={styles.fareRow}>
            <Text style={styles.fareText}>0 - 1 ‡∏Å‡∏°.</Text>
            <Text style={styles.fareValue}>35 ‡∏ö‡∏≤‡∏ó</Text>
          </View>
          <View style={styles.fareRow}>
            <Text style={styles.fareText}>1 - 10 ‡∏Å‡∏°.</Text>
            <Text style={styles.fareValue}>+5.50 ‡∏ö‡∏≤‡∏ó/‡∏Å‡∏°.</Text>
          </View>
          <View style={styles.fareRow}>
            <Text style={styles.fareText}>11 - 20 ‡∏Å‡∏°.</Text>
            <Text style={styles.fareValue}>+6.50 ‡∏ö‡∏≤‡∏ó/‡∏Å‡∏°.</Text>
          </View>
          <View style={styles.fareRow}>
            <Text style={styles.fareText}>21 - 40 ‡∏Å‡∏°.</Text>
            <Text style={styles.fareValue}>+7.50 ‡∏ö‡∏≤‡∏ó/‡∏Å‡∏°.</Text>
          </View>
          <View style={styles.fareRow}>
            <Text style={styles.fareText}>41 - 60 ‡∏Å‡∏°.</Text>
            <Text style={styles.fareValue}>+8.00 ‡∏ö‡∏≤‡∏ó/‡∏Å‡∏°.</Text>
          </View>
          <View style={styles.fareRow}>
            <Text style={styles.fareText}>61 - 80 ‡∏Å‡∏°.</Text>
            <Text style={styles.fareValue}>+9.00 ‡∏ö‡∏≤‡∏ó/‡∏Å‡∏°.</Text>
          </View>
          <View style={styles.fareRow}>
            <Text style={styles.fareText}> 80 ‡∏Å‡∏°.</Text>
            <Text style={styles.fareValue}>+10.50 ‡∏ö‡∏≤‡∏ó/‡∏Å‡∏°.</Text>
          </View>
          <View style={styles.waitingFare}>
            <Text style={styles.fareText}>‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î</Text>
            <Text style={styles.fareValue}>2 ‡∏ö‡∏≤‡∏ó/‡∏ô‡∏≤‡∏ó‡∏µ</Text>
          </View>
        </View>
      </View>
    );
  }
  renderHistory() {
    const { history, loading } = this.state;
    const historyArray = Array.isArray(history) ? history : [];
  
    return (
      <View style={styles.screenContainer}>
        <View style={styles.historySection}>
          {loading ? (
            <ActivityIndicator size="large" color="#4CAF50" />
          ) : (
            <ScrollView style={styles.historyContainer}>
              {historyArray.length === 0 ? (
                <View style={styles.emptyHistory}>
                  <Text style={styles.emptyHistoryText}>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì</Text>
                </View>
              ) : (
                historyArray.map((item) => (
                  <Animated.View
                    key={item.id}
                    style={[styles.historyItem, {
                      opacity: this.state.fadeAnim,
                      transform: [{ scale: this.state.scaleAnim }]
                    }]}
                  >
                    <View style={styles.historyContent}>
                      <Text style={styles.historyDate}>
                        {new Date(item.created_at).toLocaleString('th-TH')}
                      </Text>
                      
                      {/* ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì */}
                      <View style={styles.fareBreakdown}>
                        <Text style={styles.breakdownTitle}>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì</Text>
                        
                        {/* ‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô */}
                        <View style={styles.breakdownRow}>
                          <Text>‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô (0-1 ‡∏Å‡∏°.):</Text>
                          <Text>35.00 ‡∏ö‡∏≤‡∏ó</Text>
                        </View>
  
                        {/* ‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á 1-10 ‡∏Å‡∏°. */}
                        {item.distance > 1 && (
                          <View style={styles.breakdownRow}>
                            <Text>1-10 ‡∏Å‡∏°. ({Math.min(9, Math.max(0, item.distance - 1))} ‡∏Å‡∏°. √ó 5.50):</Text>
                            <Text>{(Math.min(9, Math.max(0, item.distance - 1)) * 5.5).toFixed(2)} ‡∏ö‡∏≤‡∏ó</Text>
                          </View>
                        )}
  
                        {/* ‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á 10-20 ‡∏Å‡∏°. */}
                        {item.distance > 10 && (
                          <View style={styles.breakdownRow}>
                            <Text>10-20 ‡∏Å‡∏°. ({Math.min(10, Math.max(0, item.distance - 10))} ‡∏Å‡∏°. √ó 6.50):</Text>
                            <Text>{(Math.min(10, Math.max(0, item.distance - 10)) * 6.5).toFixed(2)} ‡∏ö‡∏≤‡∏ó</Text>
                          </View>
                        )}
  
                        {/* ‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á 20-40 ‡∏Å‡∏°. */}
                        {item.distance > 20 && (
                          <View style={styles.breakdownRow}>
                            <Text>20-40 ‡∏Å‡∏°. ({Math.min(20, Math.max(0, item.distance - 20))} ‡∏Å‡∏°. √ó 7.50):</Text>
                            <Text>{(Math.min(20, Math.max(0, item.distance - 20)) * 7.5).toFixed(2)} ‡∏ö‡∏≤‡∏ó</Text>
                          </View>
                        )}
  
                        {/* ‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á 40-60 ‡∏Å‡∏°. */}
                        {item.distance > 40 && (
                          <View style={styles.breakdownRow}>
                            <Text>40-60 ‡∏Å‡∏°. ({Math.min(20, Math.max(0, item.distance - 40))} ‡∏Å‡∏°. √ó 8.00):</Text>
                            <Text>{(Math.min(20, Math.max(0, item.distance - 40)) * 8).toFixed(2)} ‡∏ö‡∏≤‡∏ó</Text>
                          </View>
                        )}
  
                        {/* ‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á 60-80 ‡∏Å‡∏°. */}
                        {item.distance > 60 && (
                          <View style={styles.breakdownRow}>
                            <Text>60-80 ‡∏Å‡∏°. ({Math.min(20, Math.max(0, item.distance - 60))} ‡∏Å‡∏°. √ó 9.00):</Text>
                            <Text>{(Math.min(20, Math.max(0, item.distance - 60)) * 9).toFixed(2)} ‡∏ö‡∏≤‡∏ó</Text>
                          </View>
                        )}
  
                        {/* ‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á >80 ‡∏Å‡∏°. */}
                        {item.distance > 80 && (
                          <View style={styles.breakdownRow}>
                            <Text>‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 80 ‡∏Å‡∏°. ({Math.max(0, item.distance - 80)} ‡∏Å‡∏°. √ó 10.50):</Text>
                            <Text>{(Math.max(0, item.distance - 80) * 10.5).toFixed(2)} ‡∏ö‡∏≤‡∏ó</Text>
                          </View>
                        )}
  
                        {/* ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î */}
                        {item.wait_time > 0 && (
                          <View style={styles.breakdownRow}>
                            <Text>‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î ({item.wait_time} ‡∏ô‡∏≤‡∏ó‡∏µ √ó 2.00):</Text>
                            <Text>{(item.wait_time * 2).toFixed(2)} ‡∏ö‡∏≤‡∏ó</Text>
                          </View>
                        )}
  
                        {/* ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */}
                        <View style={styles.breakdownTotal}>
                          <Text>‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</Text>
                          <Text>{item.total_fare} ‡∏ö‡∏≤‡∏ó</Text>
                        </View>
                      </View>
  
                      <View style={styles.summaryRow}>
                        <Text style={styles.historyText}>‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏ß‡∏°: {item.distance} ‡∏Å‡∏°.</Text>
                        <Text style={styles.historyText}>‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î: {item.wait_time} ‡∏ô‡∏≤‡∏ó‡∏µ</Text>
                        <Text style={styles.historyFare}>‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£: {item.total_fare} ‡∏ö‡∏≤‡∏ó</Text>
                      </View>
                    </View>
                    <TouchableOpacity
                      style={styles.deleteButton}
                      onPress={() => this.deleteHistoryItem(item.id)}
                      disabled={loading}
                    >
                      <Text style={styles.deleteButtonText}>‡∏•‡∏ö</Text>
                    </TouchableOpacity>
                  </Animated.View>
                ))
              )}
            </ScrollView>
          )}
        </View>
      </View>
    );
  }


  calculateFare = async () => {
    const { distance, time } = this.state;
    const Distance = parseFloat(distance);
    const parsedTime = parseFloat(time);

    if (isNaN(Distance) || isNaN(parsedTime) || Distance < 0 || parsedTime < 0) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      return;
    }

    let breakdown = [];
    const baseFare = 35;
    let distanceFare = 0;
    let remainingDistance = Math.max(0, Distance - 1);

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    breakdown.push({
      range: '0-1 ‡∏Å‡∏°.',
      fare: baseFare,
      note: '‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô'
    });

    // 1-10 ‡∏Å‡∏°.
    if (remainingDistance > 0) {
      const dist = Math.min(remainingDistance, 9);
      const fare = dist * 5.5;
      distanceFare += fare;
      breakdown.push({
        range: '1-10 ‡∏Å‡∏°.',
        distance: dist,
        rate: 5.5,
        fare: fare
      });
      remainingDistance -= dist;
    }

    // 10-20 ‡∏Å‡∏°.
    if (remainingDistance > 0) {
      const dist = Math.min(remainingDistance, 10);
      const fare = dist * 6.5;
      distanceFare += fare;
      breakdown.push({
        range: '10-20 ‡∏Å‡∏°.',
        distance: dist,
        rate: 6.5,
        fare: fare
      });
      remainingDistance -= dist;
    }

    // 20-40 ‡∏Å‡∏°.
    if (remainingDistance > 0) {
      const dist = Math.min(remainingDistance, 20);
      const fare = dist * 7.5;
      distanceFare += fare;
      breakdown.push({
        range: '20-40 ‡∏Å‡∏°.',
        distance: dist,
        rate: 7.5,
        fare: fare
      });
      remainingDistance -= dist;
    }

    // 40-60 ‡∏Å‡∏°.
    if (remainingDistance > 0) {
      const dist = Math.min(remainingDistance, 20);
      const fare = dist * 8;
      distanceFare += fare;
      breakdown.push({
        range: '40-60 ‡∏Å‡∏°.',
        distance: dist,
        rate: 8,
        fare: fare
      });
      remainingDistance -= dist;
    }

    // 60-80 ‡∏Å‡∏°.
    if (remainingDistance > 0) {
      const dist = Math.min(remainingDistance, 20);
      const fare = dist * 9;
      distanceFare += fare;
      breakdown.push({
        range: '60-80 ‡∏Å‡∏°.',
        distance: dist,
        rate: 9,
        fare: fare
      });
      remainingDistance -= dist;
    }

    // ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 80 ‡∏Å‡∏°.
    if (remainingDistance > 0) {
      const fare = remainingDistance * 10.5;
      distanceFare += fare;
      breakdown.push({
        range: '‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 80 ‡∏Å‡∏°.',
        distance: remainingDistance,
        rate: 10.5,
        fare: fare
      });
    }

    const waitingFare = parsedTime * 2;
    const totalFare = baseFare + distanceFare + waitingFare;
    const totalFareFixed = totalFare.toFixed(2);

    try {
      this.setState({ loading: true });
      await fetch(`${API_URL}/calculate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          distance: Distance,
          waitTime: parsedTime,
          totalFare: totalFareFixed,
          baseFare: baseFare,
          distanceFare: distanceFare,
          waitingFare: waitingFare,
          breakdown: breakdown // ‡πÄ‡∏û‡∏¥‡πà‡∏° breakdown ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô request
        }),
      });

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó state ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      this.setState({
        fare: totalFareFixed,
        baseFare: baseFare,
        distanceFare: distanceFare,
        waitingFare: waitingFare,
        fareBreakdown: breakdown, // ‡πÄ‡∏û‡∏¥‡πà‡∏° breakdown ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô state
        distance: '',
        time: ''
      });

      await this.fetchHistory();

    } catch (error) {
      alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
    } finally {
      this.setState({ loading: false });
    }
};

  deleteHistoryItem = async (id) => {
    try {
      this.setState({ loading: true });
      await fetch(`${API_URL}/history/${id}`, {
        method: 'DELETE'
      });
      await this.fetchHistory();
    } catch (error) {
      alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
    } finally {
      this.setState({ loading: false });
    }
  };

  renderScreen() {
    const { currentScreen } = this.state;
    return (
      <ScrollView style={styles.mainScrollView}>
        <Animated.View
          style={[
            styles.container,
            {
              opacity: this.state.fadeAnim,
              transform: [{ scale: this.state.scaleAnim }]
            }
          ]}
        >
          <View style={[styles.gradientHeader, { backgroundColor: '#4CAF50' }]}>
            <Text style={styles.appName}>‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£</Text>
            <Text style={styles.appSubtitle}>‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥</Text>
          </View>

          {this.renderNavigation()}

          {currentScreen === '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì' && this.renderCalculator()}
          {currentScreen === '‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£' && this.renderFareGuide()}
          {currentScreen === '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥' && this.renderHistory()}
          {currentScreen === '‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö' && this.renderAbout()}
          {currentScreen === '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠' && this.renderContact()}
        </Animated.View>
      </ScrollView>
    );
  }

  render() {
    return (
      <SafeAreaView style={styles.safeArea}>
        <StatusBar barStyle="light-content" backgroundColor="#4CAF50" />
        {this.renderScreen()}
      </SafeAreaView>
    );
  }
}

const styles = StyleSheet.create({
  mainScrollView: {
    flex: 1,
  },
  contentContainer: {
    padding: 16,
    paddingBottom: 30, // ‡πÄ‡∏û‡∏¥‡πà‡∏° padding ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
  },
  historyList: {
    marginTop: 10,
  },
  fareBreakdown: {
    backgroundColor: '#E8F5E9',
    borderRadius: 15,
    padding: 15,
    marginTop: 10,
  },
  breakdownTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#2c3e50',
    marginBottom: 8,
  },
  breakdownText: {
    fontSize: 14,
    color: '#34495e',
    marginBottom: 4,
  },
  breakdownTotal: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#4CAF50',
    marginTop: 8,
    borderTopWidth: 1,
    borderTopColor: '#4CAF50',
    paddingTop: 8,
  },
  fareGuide: {
    backgroundColor: '#ffffff',
    borderRadius: 15,
    padding: 15,
    marginBottom: 20,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
  },
  fareGuideTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2c3e50',
    marginBottom: 12,
    textAlign: 'center',
  },
  fareRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  fareText: {
    fontSize: 15,
    color: '#34495e',
  },
  fareValue: {
    fontSize: 15,
    color: '#4CAF50',
    fontWeight: '600',
  },
  waitingFare: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingTop: 12,
    marginTop: 4,
    borderTopWidth: 2,
    borderTopColor: '#4CAF50',
  },
  safeArea: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  gradientHeader: {
    padding: 20,
    alignItems: 'center',
    borderBottomLeftRadius: 20,
    borderBottomRightRadius: 20,
  },
  appName: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#ffffff',
    marginBottom: 5,
  },
  appSubtitle: {
    fontSize: 16,
    color: '#E8F5E9',
  },
  container: {
    flex: 1,
    // padding: 16,
  },
  inputContainer: {
    backgroundColor: '#ffffff',
    borderRadius: 15,
    padding: 20,
    marginTop: 20,
    marginBottom: 20,
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
  },
  inputLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#2c3e50',
    marginBottom: 8,
  },
  input: {
    borderWidth: 1,
    borderColor: '#e0e0e0',
    borderRadius: 10,
    padding: 12,
    marginBottom: 16,
    fontSize: 16,
    backgroundColor: '#f8f9fa',
  },
  calculateButton: {
    backgroundColor: '#4CAF50',
    borderRadius: 12,
    padding: 15,
    alignItems: 'center',
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
  },
  buttonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: '600',
  },
  resultContainer: {
    backgroundColor: '#4CAF50',
    borderRadius: 15,
    padding: 20,
    marginBottom: 20,
    alignItems: 'center',
    elevation: 4,
  },
  resultLabel: {
    fontSize: 18,
    color: '#ffffff',
    marginBottom: 8,
  },
  resultValue: {
    fontSize: 36,
    fontWeight: 'bold',
    color: '#ffffff',
  },
  historySection: {
    marginTop: 20,
  },
  historyTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#2c3e50',
    marginBottom: 12,
  },
  historyContainer: {
    marginTop: 10,
  },
  emptyHistory: {
    padding: 20,
    alignItems: 'center',
    backgroundColor: '#ffffff',
    borderRadius: 15,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 3,
  },
  emptyHistoryText: {
    fontSize: 16,
    color: '#666666',
  },
  historyItem: {
    backgroundColor: '#ffffff',
    borderRadius: 15,
    marginBottom: 12,
    elevation: 2,
    overflow: 'hidden',
  },
  historyContent: {
    padding: 16,
  },
  historyDate: {
    fontSize: 14,
    color: '#666666',
    marginBottom: 8,
  },
  historyText: {
    fontSize: 16,
    color: '#34495e',
    marginBottom: 4,
  },
  historyFare: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#4CAF50',
    marginTop: 8,
  },
  deleteButton: {
    backgroundColor: '#ff5252',
    padding: 8,
    alignItems: 'center',
  },
  deleteButtonText: {
    color: '#ffffff',
    fontSize: 14,
    fontWeight: '600',
  },
  navigationContainer: {
    flexDirection: 'row',
    backgroundColor: '#fff',
    padding: 5,
    marginHorizontal: 60,
    marginTop: -20,
    borderRadius: 15,
    elevation: 4,
    shadowColor: '#000',  
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    justifyContent: 'center', // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å space-around ‡πÄ‡∏õ‡πá‡∏ô center
    alignItems: 'center',
  },
  
  navButton: {
    flex: 1,
    paddingVertical: 12,
    paddingHorizontal: 8  ,
    borderRadius: 10,
    marginHorizontal: 4,
    alignItems: 'center',
    justifyContent: 'center', // ‡πÄ‡∏û‡∏¥‡πà‡∏° justifyContent: 'center' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°
  },
  navButtonActive: {
    backgroundColor: '#4CAF50',
  },
  navButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#666',
  },
  navButtonTextActive: {
    color: '#fff',
  },
  screenContainer: {
    padding: 16,
  },
  navigationScroll: {
    flexGrow: 0,
  },
  aboutContainer: {
    backgroundColor: '#fff',
    borderRadius: 15,
    padding: 20,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
  },
  aboutHeader: {
    alignItems: 'center',
    marginBottom: 24,
  },
  logoCircle: {
    width: 80,
    height: 80,
    borderRadius: 40,
    backgroundColor: '#4CAF50',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 16,
  },
  logoText: {
    fontSize: 40,
    fontWeight: 'bold',
    color: '#fff',
  },
  aboutTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#2c3e50',
    marginBottom: 8,
  },
  appVersion: {
    fontSize: 16,
    color: '#666',
  },
  aboutContent: {
    paddingHorizontal: 8,
  },
  aboutDescription: {
    fontSize: 16,
    color: '#34495e',
    lineHeight: 24,
    marginBottom: 24,
    textAlign: 'center',
  },
  featureList: {
    marginTop: 16,
  },
  featureTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2c3e50',
    marginBottom: 16,
  },
  featureItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  featureDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: '#4CAF50',
    marginRight: 12,
  },
  featureText: {
    fontSize: 16,
    color: '#34495e',
  },
  contactContainer: {
    padding: 16,
  },
  contactTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#2c3e50',
    marginBottom: 24,
    textAlign: 'center',
  },
  contactCard: {
    flexDirection: 'row',
    backgroundColor: '#fff',
    borderRadius: 15,
    padding: 16,
    marginBottom: 16,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
  },
  contactIcon: {
    width: 50,
    height: 50,
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 16,
  },
  contactIconText: {
    fontSize: 24,
  },
  contactInfo: {
    flex: 1,
    justifyContent: 'center',
  },
  contactLabel: {
    fontSize: 14,
    color: '#666',
    marginBottom: 4,
  },
  contactValue: {
    fontSize: 16,
    color: '#2c3e50',
    fontWeight: '600',
  },
  officeContainer: {
    backgroundColor: '#fff',
    borderRadius: 15,
    padding: 20,
    marginTop: 16,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
  },
  officeTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2c3e50',
    marginBottom: 16,
  },
  officeAddress: {
    fontSize: 16,
    color: '#34495e',
    lineHeight: 24,
    marginBottom: 16,
  },
  officeHours: {
    fontSize: 14,
    color: '#666',
    fontStyle: 'italic',
  },
  fareRatesContainer: {
    flexDirection: 'row',
    paddingHorizontal: 8,
  },
  fareRateCard: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    marginHorizontal: 8,
    minWidth: 200,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
  },
  fareRateTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#2c3e50',
    marginBottom: 12,
    textAlign: 'center',
  },
  fareGuide: {
    backgroundColor: '#f8f9fa',
    borderRadius: 15,
    padding: 15,
    marginBottom: 20,
  },
  fareGuideTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2c3e50',
    marginBottom: 12,
    textAlign: 'center',
  },
  fareGuideCard: {
    backgroundColor: '#ffffff',
    borderRadius: 15,
    padding: 20,
    marginBottom: 20,
    boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
  },
  fareSection: {
    marginBottom: 20,
  },
  fareSectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#2c3e50',
    marginBottom: 10,
    paddingBottom: 5,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  calculatorCard: {
    backgroundColor: '#ffffff',
    borderRadius: 15,
    padding: 20,
    marginBottom: 20,
    boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
  },
  calculatorTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2c3e50',
    marginBottom: 20,
    textAlign: 'center',
  },
  inputGroup: {
    marginBottom: 15,
  },
  resultCard: {
    backgroundColor: '#ffffff',
    borderRadius: 15,
    padding: 20,
    boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
  },
  resultTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2c3e50',
    marginBottom: 15,
    textAlign: 'center',
  },
  resultRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  resultLabel: {
    fontSize: 16,
    color: '#34495e',
  },
  resultValue: {
    fontSize: 16,
    color: '#2c3e50',
    fontWeight: '600',
  },
  resultTotal: {
    marginTop: 10,
    borderBottomWidth: 0,
  },
  totalLabel: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2c3e50',
  },
  totalValue: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#4CAF50',
  },
  breakdownRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingVertical: 4,
  },
  breakdownTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#2c3e50',
    marginBottom: 8,
  },
  fareBreakdown: {
    backgroundColor: '#f8f9fa',
    padding: 12,
    borderRadius: 8,
    marginVertical: 8,
  },
  breakdownTotal: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingTop: 8,
    marginTop: 8,
    borderTopWidth: 1,
    borderTopColor: '#4CAF50',
    fontWeight: 'bold',
  },
  summaryRow: {
    marginTop: 8,
    paddingTop: 8,
    borderTopWidth: 1,
    borderTopColor: '#eee',
  }
});

export default App;